#!/usr/bin/env ruby

require 'optparse'
require 'uri'
require 'k8s-client'

Options = Struct.new(
  :config,
  :server,
  :insecure_skip_tls_verify,
  :prefetch_resources,
  :namespace,
  :all_namespaces,
  :label_selector,
  :pipeline_list,
  :list_resources,
  :list_pods,
  :update_node,
  :node_unschedulable,
  :delete_pod,
  :delete_pods,
  :create_service,
  :service_type,
  :service_port,
  :resources,
  :create_resources,
  :update_resources,
  :delete_resources,
  :stack_name,
  :stack,
  :prune_stack,
  :delete_stack,
  :api,
  :list_api_resources,
)

options = Options.new()
options.create_resources = []
options.update_resources = []
options.delete_resources = []

logger = Logger.new(STDERR)

parser = OptionParser.new do |parser|
  parser.on('--debug-api') do
    K8s::Logging.debug!
    K8s::Transport.debug!
  end
  parser.on('--debug') do
    K8s::Logging.debug!
    K8s::Transport.verbose!
  end
  parser.on('--verbose') do
    K8s::Logging.verbose!
    K8s::Transport.quiet!
  end
  parser.on('--quiet') do
    K8s::Logging.quiet!
    K8s::Transport.quiet!
  end
  parser.on('--kubeconfig=PATH') do |path|
    options.config = K8s::Config.load_file(path)
  end
  parser.on('--server=SERVER') do |server|
    options.server = URI(server)
  end
  parser.on('--insecure-skip-tls-verify') do
    options.insecure_skip_tls_verify = true
  end
  parser.on('--prefetch-resources', TrueClass) do |bool|
    options.prefetch_resources = bool
  end
  parser.on('-n', '--namespace=NAMESPACE') do |namespace|
    options.namespace = namespace
  end
  parser.on('--all-namespaces') do
    options.all_namespaces = true
  end
  parser.on('-l', '--label-selector=LABEL=VALUE') do |selector|
    options.label_selector = selector
  end
  parser.on('--pipeline-list') do
    options.pipeline_list = true
  end
  parser.on('--list-resources') do
    options.list_resources = true
  end
  parser.on('--list-pods') do
    options.list_pods = true
  end
  parser.on('--update-node=NODE') do |node|
    options.update_node = node
  end
  parser.on('--node-unschedulable=BOOL', TrueClass) do |bool|
    options.node_unschedulable = bool
  end
  parser.on('--delete-pod=POD') do |pod|
    options.delete_pod = pod
  end
  parser.on('--delete-pods') do
    options.delete_pods = true
  end
  parser.on('--create-service=SERVICE') do |service|
    options.create_service = service
  end
  parser.on('--service-type=SERVICE-TYPE') do |type|
    options.service_type = type
  end
  parser.on('--service-port=PORT', Integer) do |port|
    options.service_port = port
  end
  parser.on('--resource-file=path') do |path|
    options.resources = K8s::Resource.from_files(path)
  end
  parser.on('--create') do
    options.create_resources = options.resources
  end
  parser.on('--update') do
    options.update_resources = options.resources
  end
  parser.on('--delete') do
    options.delete_resources = options.resources
  end
  parser.on('--stack-name=NAME') do |name|
    options.stack_name = name
  end
  parser.on('--stack=PATH') do |path|
    options.stack = K8s::Stack.load(path,
      name: options.stack_name,
    )
  end
  parser.on('--prune-stack', TrueClass) do |flag|
    options.prune_stack = flag
  end
  parser.on('--delete-stack') do
    options.delete_stack = options.stack
  end
  parser.on('--api=API') do |api|
    options.api = api
  end
  parser.on('--list-api-resources') do
    options.list_api_resources = options.api
  end
end

parser.parse!

if options.config
  client = K8s::Client.config(options.config)
else
  client = K8s.client(options.server.to_s,
    ssl_verify_peer: !options.insecure_skip_tls_verify,
  )
end

logger.info "Kube server version: #{client.version.gitVersion}"

if options.prefetch_resources
  client.apis(prefetch_resources: true)
end

if options.all_namespaces
  namespace = nil # all
elsif options.namespace
  namespace = options.namespace
elsif options.config && ns = options.config.context.namespace
  namespace = ns
else
  namespace = nil # all
end

if options.list_api_resources
  logger.info "List resource types for api=#{options.list_api_resources}..."

  client.api(options.list_api_resources).resources do |api_resource|
    logger.info "api=#{api_resource.api_version} resource=#{api_resource.resource} subresource=#{api_resource.subresource}"
  end
end

if options.pipeline_list
  objects = client.list_resources(namespace: namespace, labelSelector: options.label_selector)
  objects.each do |object|
    logger.info "api=#{object.apiVersion} kind=#{object.kind} namespace=#{object.metadata.namespace} name=#{object.metadata.name}"
  end
elsif options.list_resources
  client.apis(prefetch_resources: true).each do |api|
    logger.info "api=#{api.api_version}"

    resources = api.resources.select{|resource| resource.list? }

    resources.each do |resource|
      logger.info "api=#{api.api_version} resource=#{resource.name}"

      objects = resource.list(labelSelector: options.label_selector)
      objects.each do |object|
        logger.info "api=#{object.apiVersion} kind=#{object.kind} namespace=#{object.metadata.namespace} name=#{object.metadata.name}"
      end
    end
  end
end

if options.list_pods
  client.api('v1').resource('pods', namespace: namespace).list(labelSelector: options.label_selector).each do |pod|
    puts "namespace=#{pod.metadata.namespace} pod: #{pod.metadata.name} node=#{pod.spec.nodeName}"
  end
end

if options.update_node
  node = client.api('v1').resource('nodes').get(options.update_node)

  puts "Update node=#{node.metadata.name}..."

  if !options.node_unschedulable.nil?
    puts "Set node=#{node.metadata.name} unschedulable: #{node.spec.unschedulable} => #{options.node_unschedulable}"

    node[:spec][:unschedulable] = options.node_unschedulable
  end

  client.api('v1').resource('nodes').update_resource(node)
end

if options.delete_pod
  logger.info "Delete pod=#{options.delete_pod} in namespace=#{namespace}"

  pod = client.api('v1').resource('pods', namespace: namespace).delete(options.delete_pod)

  logger.debug { pod.metadata }
end

if options.delete_pods
  logger.info "Delete pods with labelSelector=#{options.label_selector} in namespace=#{namespace}"

  pods = client.api('v1').resource('pods', namespace: namespace).delete_collection(labelSelector: options.label_selector)

  pods.each do |pod|
    logger.info "Deleted pod=#{pod.metadata.name} in namespace=#{pod.metadata.namespace} on node=#{pod.spec.nodeName}"
  end
end

if options.create_service
  service = K8s::Resource.new(
    apiVersion: 'v1',
    kind: 'Service',
    metadata: {
      namespace: namespace,
      name: options.create_service,
    },
    spec: {
      type: options.service_type,
      ports: [
        { port: options.service_port },
      ],
      selector: Hash[options.label_selector.split('=', 2)],
    },
  )

  logger.info "Create service=#{service.metadata.name} in namespace=#{service.metadata.namespace}"

  service = client.api('v1').resource('services').create_resource(service)

  logger.debug { service }
end

for resource in options.create_resources
  resource = client.create_resource(resource)

  logger.info "Created #{resource.apiVersion} resource #{resource.kind} #{resource.metadata.name} in namespace #{resource.metadata.namespace}:\n#{JSON.pretty_generate(resource)}"
end

for resource in options.update_resources
  resource = client.update_resource(resource)

  logger.info "Updated #{resource.apiVersion} resource #{resource.kind} #{resource.metadata.name} in namespace #{resource.metadata.namespace}:\n#{JSON.pretty_generate(resource)}"
end

for resource in options.delete_resources
  begin
    resource = client.delete_resource(resource)

    logger.info "Deleted #{resource.apiVersion} resource #{resource.kind} #{resource.metadata.name} in namespace #{resource.metadata.namespace}:\n#{JSON.pretty_generate(resource)}"
  rescue K8s::Error::NotFound => exc
    logger.info "Skip #{resource.apiVersion} resource #{resource.kind} #{resource.metadata.name} in namespace #{resource.metadata.namespace}: #{exc}"
  end
end

if stack = options.delete_stack
  logger.info "Delete stack #{stack.name}..."

  stack.delete(client)

elsif options.stack
  logger.info "Apply stack #{options.stack.name}..."

  options.stack.apply(client,
    prune: options.prune_stack,
  )
end
